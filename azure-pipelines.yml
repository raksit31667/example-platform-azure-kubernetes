trigger:
  - main

variables:
  terraformVersion: '1.3.0'
  azureSubscriptionServiceConnectionName: 'example-platform-azure-kubernetes'
  terraformStateResourceGroupName: 'example-platform-tfstate'
  terraformStateStorageAccountName: 'exampleplatformtfstate'
  terraformStateStorageAccountContainerName: 'terraform-state'
  terraformStateStorageAccountContainerFileName: 'terraform.tfstate'
  deploymentEnvironment: 'Terraform'
  destroyEnvironment: 'Terraform Destroy'

stages:
  - stage: InitValidatePlan
    displayName: Init, Validate and Plan
    jobs:
      - job: InitValidatePlan
        steps:
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(terraformVersion)'

          - task: TerraformCLI@0
            displayName: 'Terraform init'
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: $(azureSubscriptionServiceConnectionName)
              backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
              backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
              backendAzureRmContainerName: $(terraformStateStorageAccountContainerName)
              backendAzureRmKey: $(terraformStateStorageAccountContainerFileName)

          - task: TerraformCLI@0
            displayName: 'Terraform validate'
            inputs:
              command: 'validate'
              backendType: 'azurerm'
              environmentServiceName: $(azureSubscriptionServiceConnectionName)

          - task: TerraformCLI@0
            displayName: 'Terraform plan'
            inputs:
              command: 'plan'
              backendType: 'azurerm'
              commandOptions: '-out=tfplan -input=false'
              environmentServiceName: $(azureSubscriptionServiceConnectionName)

          - publish: ./
            artifact: 'terraform-archive'
            displayName: Publish Terraform archive

  - stage: Apply
    displayName: Apply
    jobs:
      - deployment: Apply
        environment: $(deploymentEnvironment)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadPipelineArtifact@2
                  displayName: Download Terraform archive
                  inputs:
                    artifactName: 'terraform-archive'
                    path: $(Build.SourcesDirectory)

                - task: Bash@3
                  displayName: Grant read permission to Terraform files
                  inputs:
                    targetType: 'inline'
                    script: 'chmod -R 755 .terraform/providers/registry.terraform.io/hashicorp'

                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: '$(terraformVersion)'

                - task: TerraformCLI@0
                  displayName: 'Terraform init'
                  inputs:
                    command: 'init'
                    backendType: 'azurerm'
                    backendServiceArm: $(azureSubscriptionServiceConnectionName)
                    backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
                    backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
                    backendAzureRmContainerName: $(terraformStateStorageAccountContainerName)
                    backendAzureRmKey: $(terraformStateStorageAccountContainerFileName)

                - task: TerraformCLI@0
                  displayName: 'Terraform apply'
                  inputs:
                    command: 'apply'
                    backendType: 'azurerm'
                    environmentServiceName: $(azureSubscriptionServiceConnectionName)

                - publish: ./
                  artifact: 'terraform-archive'
                  displayName: Publish Terraform archive

  - stage: Destroy
    displayName: Destroy
    jobs:
      - deployment: Apply
        environment: $(destroyEnvironment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download Terraform archive
                  inputs:
                    artifactName: 'terraform-archive'
                    path: $(Build.SourcesDirectory)

                - task: Bash@3
                  displayName: Grant read permission to Terraform files
                  inputs:
                    targetType: 'inline'
                    script: 'chmod -R 755 .terraform/providers/registry.terraform.io/hashicorp'

                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: '$(terraformVersion)'

                - task: TerraformCLI@0
                  displayName: 'Terraform init'
                  inputs:
                    command: 'init'
                    backendType: 'azurerm'
                    backendServiceArm: $(azureSubscriptionServiceConnectionName)
                    backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
                    backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
                    backendAzureRmContainerName: $(terraformStateStorageAccountContainerName)
                    backendAzureRmKey: $(terraformStateStorageAccountContainerFileName)

                - task: TerraformCLI@0
                  displayName: 'Terraform destroy'
                  inputs:
                    command: 'destroy'
                    backendType: 'azurerm'
                    environmentServiceName: $(azureSubscriptionServiceConnectionName)
