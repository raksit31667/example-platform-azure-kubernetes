trigger:
  - main

variables:
  - group: Terraform
  - name: terraformVersion
    value: '1.3.0'
  - name: azureSubscriptionServiceConnectionName
    value: example-platform-azure-kubernetes
  - name: terraformStateResourceGroupName
    value: example-platform-tfstate
  - name: terraformStateStorageAccountName
    value: exampleplatformtfstate
  - name: terraformStateStorageAccountContainerName
    value: terraform-state
  - name: terraformStateStorageAccountContainerFileName
    value: terraform.tfstate
  - name: deploymentEnvironment
    value: Terraform
  - name: destroyEnvironment
    value: Terraform Destroy

stages:
  - stage: InitValidatePlan
    displayName: Init, Validate and Plan
    jobs:
      - job: InitValidatePlan
        steps:
          - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '$(terraformVersion)'

          - task: TerraformCLI@0
            displayName: 'Terraform init'
            inputs:
              command: 'init'
              backendType: 'azurerm'
              backendServiceArm: $(azureSubscriptionServiceConnectionName)
              backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
              backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
              backendAzureRmContainerName: $(terraformStateStorageAccountContainerName)
              backendAzureRmKey: $(terraformStateStorageAccountContainerFileName)

          - task: TerraformCLI@0
            displayName: 'Terraform validate'
            inputs:
              command: 'validate'
              backendType: 'azurerm'
              environmentServiceName: $(azureSubscriptionServiceConnectionName)

          - task: TerraformCLI@0
            displayName: 'Terraform plan'
            env:
              AZDO_ORG_SERVICE_URL: https://dev.azure.com/raksitman
              AZDO_PERSONAL_ACCESS_TOKEN: $(azureDevOpsPersonalAccessToken)
            inputs:
              command: 'plan'
              backendType: 'azurerm'
              commandOptions: '-out=tfplan -input=false'
              environmentServiceName: $(azureSubscriptionServiceConnectionName)

          - publish: ./
            artifact: 'terraform-archive'
            displayName: Publish Terraform archive

  - stage: Apply
    displayName: Apply
    jobs:
      - deployment: Apply
        environment: $(deploymentEnvironment)
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: none

                - task: DownloadPipelineArtifact@2
                  displayName: Download Terraform archive
                  inputs:
                    artifactName: 'terraform-archive'
                    path: $(Build.SourcesDirectory)

                - task: Bash@3
                  displayName: Grant read permission to Terraform files
                  inputs:
                    targetType: 'inline'
                    script: 'chmod -R 755 .terraform/providers/registry.terraform.io/hashicorp'

                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: '$(terraformVersion)'

                - task: TerraformCLI@0
                  displayName: 'Terraform init'
                  inputs:
                    command: 'init'
                    backendType: 'azurerm'
                    backendServiceArm: $(azureSubscriptionServiceConnectionName)
                    backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
                    backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
                    backendAzureRmContainerName: $(terraformStateStorageAccountContainerName)
                    backendAzureRmKey: $(terraformStateStorageAccountContainerFileName)

                - task: TerraformCLI@0
                  displayName: 'Terraform apply'
                  env:
                    AZDO_ORG_SERVICE_URL: https://dev.azure.com/raksitman
                    AZDO_PERSONAL_ACCESS_TOKEN: $(azureDevOpsPersonalAccessToken)
                  inputs:
                    command: 'apply'
                    backendType: 'azurerm'
                    environmentServiceName: $(azureSubscriptionServiceConnectionName)

                - publish: ./
                  artifact: 'terraform-archive'
                  displayName: Publish Terraform archive

  - stage: Destroy
    displayName: Destroy
    condition: succeededOrFailed()
    jobs:
      - deployment: Destroy
        environment: $(destroyEnvironment)
        strategy:
          runOnce:
            deploy:
              steps:
                - task: DownloadPipelineArtifact@2
                  displayName: Download Terraform archive
                  inputs:
                    artifactName: 'terraform-archive'
                    path: $(Build.SourcesDirectory)

                - task: Bash@3
                  displayName: Grant read permission to Terraform files
                  inputs:
                    targetType: 'inline'
                    script: 'chmod -R 755 .terraform/providers/registry.terraform.io/hashicorp'

                - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
                  displayName: 'Install Terraform'
                  inputs:
                    terraformVersion: '$(terraformVersion)'

                - task: TerraformCLI@0
                  displayName: 'Terraform init'
                  inputs:
                    command: 'init'
                    backendType: 'azurerm'
                    backendServiceArm: $(azureSubscriptionServiceConnectionName)
                    backendAzureRmResourceGroupName: $(terraformStateResourceGroupName)
                    backendAzureRmStorageAccountName: $(terraformStateStorageAccountName)
                    backendAzureRmContainerName: $(terraformStateStorageAccountContainerName)
                    backendAzureRmKey: $(terraformStateStorageAccountContainerFileName)

                - task: TerraformCLI@0
                  displayName: 'Terraform destroy'
                  env:
                    AZDO_ORG_SERVICE_URL: https://dev.azure.com/raksitman
                    AZDO_PERSONAL_ACCESS_TOKEN: $(azureDevOpsPersonalAccessToken)
                  inputs:
                    command: 'destroy'
                    backendType: 'azurerm'
                    environmentServiceName: $(azureSubscriptionServiceConnectionName)
